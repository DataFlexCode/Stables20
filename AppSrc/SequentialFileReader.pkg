//> The cSequentialFileReader defined in this package aides the reading of CSV files.
//> pkg.doc.end

Use VdfBase.pkg
Use FileFunctions.pkg // Define oFileFunctions object
Use StringFunctions.pkg // Define oStringFunctions object
Use DateFunctions.pkg // Define oDateFunctions object

#IFNDEF Is$WebApp // If Windows application
    Use Win\StatusPanelAlternative.pkg
#ENDIF

Struct tSequentialFileFixedColumn
    Integer iStart
    Integer iWidth
    Boolean bTrim
End_Struct

Struct tSequentialFileColumnFormats
    Integer iType
    String  sMaxLength
End_Struct

Struct tSequentialFileReadParams
    Integer iFileFormat // 0=CSV 1=Fixed positions
    String  sFieldDelimiter
    Boolean bProtectQuotes
    Boolean bStripQuotes    // Remove enclosing quotes from column values
    Boolean bColumnNames    // bColumnNames in first record
    Boolean bOem
    
    
    Boolean bSentinel
    Boolean bAllowCancel
    String  sSentinelCaption
    
    String[] aValidColumnNames // If this array is empty column names are not validated
    Boolean bAutoLocateHeaderLine // Only works if aValidColumns er sat til noget
    
    tSequentialFileFixedColumn[] aColumnPositions // Fixed column positions. Used if iFileFormat=1
End_Struct

Enum_List // FileReadStatus error codes
    Define SFRS_NO_ERROR
    Define SFRS_FILE_NOT_FOUND  // "File not found"
    Define SFRS_INVALID_COLUMN_NAMES
    Define SFRS_USER_INTERRUPT  // "File reading interrupted by user" 
    Define SFRS_HEADER_LINE_NOT_LOCATED
    Define SFRS_CUSTOM_ERROR
End_Enum_List

Struct tSequentialFileReadStatus
    String  sFileName
    Date    dDateInitiated
    String  sTimeInitiated
    Number  nFileSize  // File size
    Number  nBytesRead
    Integer iRecordsRead
    Integer iLinesRead
    Integer bCancelled    // Was reading interrupted?
    Integer iErrorCode
    String  sErrorText
End_Struct

//> Declare an object of this class to automate the reading of CSV files.
//> <code>
//> </code>
Class cSequentialFileReader is a cObject
    Procedure Construct_Object
        Forward Send Construct_Object
        
        Property tSequentialFileReadParams ptParams
        Property tSequentialFileReadStatus ptStatus
        // Not used by the class but in situations where you have an array of them.
        Property String psFormatName
    End_Procedure
    
    Procedure SplitStringModified ;
                          String sValue ;                    //> The string to be divided into items.
                          String sSeparatorChar ;            //> Determines which character(s) is considered a "dividing" character.
                          Boolean bIgnoreDoubleSeparators ;  //> If two or more separater characters are encountered in immediate succession, this parameter decides whether they should be considered as one divider or as a number of separate dividers.
                          Boolean bProtectQuotes ;           //> If this is true, strings in quotes (single or double) will not be scanned for separating characters.
                          String[] ByRef aValues             //> The result. The array is reset during procedure initialization.
        Integer iLen       // Length of the string we are parsing
        Integer iItem      // Pointer to the next available index in the target array (aValues)
        Integer iStartItem // Number of items originally in the target array
        Integer iPos       // The current position in the string (sValue) we are parsing

        String  sChar      // The character currently being examined by the loop
        String  sItem      // The value of the next item as it is being built
        String  sQuoteChar // If " or ', we are currently in a quoted section of the string
        String  sQuotes    // Quotation characters: "'

        Move "" to sQuoteChar

        Move (ResizeArray(aValues,0)) to aValues
        Move 0 to iStartItem

        Move iStartItem to iItem
        Move (length(sValue)) to iLen
        
        If (iLen=0) Begin // If zero length we return the empty array
            Procedure_Return
        End
        
        Move "" to sItem
//        Move ("'"+'"') to sQuotes
        Move ('"') to sQuotes

        Move 1 to iPos
        If (bIgnoreDoubleSeparators) Begin // Leadin separating characters are to be disregarded, we advance the position accordingly
            While (iPos<=iLen and sSeparatorChar contains mid(sValue,1,iPos))
              Increment iPos
            End
        End
        While (iPos<=iLen)
            Move (mid(sValue,1,iPos)) to sChar
            Increment iPos
                                                                          
            If (sQuoteChar<>"") Begin
                If (sChar=sQuoteChar) Begin
                    Move "" to sQuoteChar
                End
                Move (sItem+sChar) to sItem
            End
            Else Begin // We're not in a quote
                If (sSeparatorChar contains sChar) Begin
                    Move sItem to aValues[iItem]
                    Increment iItem
                    Move "" to sItem

                    If (bIgnoreDoubleSeparators) Begin // succeeding separating characters are to be considered as one, we advance the position accordingly
                        While (iPos<=iLen and sSeparatorChar contains mid(sValue,1,iPos))
                          Increment iPos
                        End
                    End
                End
                Else If (bProtectQuotes<>0 and sQuotes contains sChar) Begin
//                Else If (bProtectQuotes<>0 and sQuotes contains sChar and Trim(sItem)="") Begin
                    Move sChar to sQuoteChar
                    Move (sItem+sChar) to sItem
                End
                Else Begin
                    Move (sItem+sChar) to sItem
                End
            End
        End

        // Added "or not(bIgnoreDoubleSeparators)" to the below statement to add the last item, even if it's blank
        If (sItem<>"" or not(bIgnoreDoubleSeparators)) Begin
            Move sItem to aValues[iItem]
            Increment iItem
        End
    End_Procedure // SplitString

        Procedure SetValidColumnNames String sColumnsNames
            String[] aColumnNames
            tSequentialFileReadParams stParams
            Get ptParams to stParams
            Send SplitStringModified sColumnsNames stParams.sFieldDelimiter False stParams.bProtectQuotes (&aColumnNames)
            Move aColumnNames to stParams.aValidColumnNames
            Set ptParams to stParams
        End_Procedure
        
        // Check that column names in file are the same as the ones specified in the preset.
        Function ValidateColumnNames String[] aValidColumnNames String[] aColumnNames Returns Boolean
            Integer iMax iMax2 iIndex
            Move (SizeOfArray(aValidColumnNames)-1) to iMax2
            If (iMax2>0) Begin
                Move (SizeOfArray(aColumnNames)-1) to iMax
                If (iMax<>iMax2) Begin
                    Function_Return False
                End
                For iIndex from 0 to iMax
                    If (aColumnNames[iIndex]<>aValidColumnNames[iIndex]) Begin
                        Function_Return False
                    End
                Loop
            End
            Function_Return True
        End_Function
    
        Procedure _DoResetStatus
            tSequentialFileReadStatus stStatus
            Get SystemDate of oDateFunctions to stStatus.dDateInitiated
            Get SystemTimeString of oDateFunctions to stStatus.sTimeInitiated
            Move 0 to stStatus.nBytesRead
            Move 0 to stStatus.iRecordsRead
            Move False to stStatus.bCancelled
            Move SFRS_NO_ERROR to stStatus.iErrorCode
            Move "" to stStatus.sErrorText

            Set ptStatus to stStatus
        End_Procedure
        
        Procedure SplitStringFixedPositions String sLine tSequentialFileFixedColumn[] aColumnPositions String[] ByRef aColumnValues
        End_Procedure
        
        Procedure UpdateStatus tSequentialFileReadStatus stStatus
#IFNDEF Is$WebApp // If Windows 
            Set Action_Text of ghoStatusPanel to ("Read: "+String(stStatus.iRecordsRead)+" records ("+NumberToStringTS(oStringFunctions,stStatus.nBytesRead,0)+" bytes)")
            Set Meter_Pct of ghoStatusPanel to (100.0*stStatus.nBytesRead/stStatus.nFileSize)
            Set Meter_Text of ghoStatusPanel to (String(Integer(100.0*stStatus.nBytesRead/stStatus.nFileSize))+"%")
#ENDIF            
        End_Procedure
        
        Procedure _StripQuotes String[] ByRef aColumnValues
            Integer iMax iIndex
            String sValue
            Move (SizeOfArray(aColumnValues)-1) to iMax
            For iIndex from 0 to iMax
               Send StripQuotes of oStringFunctions (&aColumnValues[iIndex]) 
            Loop
        End_Procedure
        
        Function OnCharactersetConversion String sValue Returns String
            Function_Return sValue
        End_Function
        
    Function CanRead String sFileName Returns Boolean
        Boolean bAnsi
        Boolean bFin bFirst
        Boolean bColumnNames
        Integer iChannel iRecordsRead
        String  sLine
        Boolean bTabDelimited
        
        tSequentialFileReadParams stParams
        tSequentialFileReadStatus stStatus    
        String[] aColumnValues
        
        Get ptParams to stParams
        Move (stParams.sFieldDelimiter=Character(9)) to bTabDelimited
        If (bTabDelimited) Begin
            Get DirectInput of oFileFunctions ("binary: "+sFileName) to iChannel
        End
        Else Begin
            Get DirectInput of oFileFunctions sFileName to iChannel
        End
        If (iChannel=>0) Begin
            Move True to bFirst
            Move (not(stParams.bOem)) to bAnsi
            Move 0 to iRecordsRead
            Repeat
                Readln channel iChannel sLine
                If (bFirst) Begin
                    Get _RemoveBom sLine to sLine
                    Move False to bFirst
                End
                If (bTabDelimited) Begin // If we read binary: the readln command will leave in cr and/or lf characters.
                   Move (Replaces(Character(10),sLine,"")) to sLine 
                   Move (Replaces(Character(13),sLine,"")) to sLine 
                End
                Move (SeqEof) to bFin
                If (not(bFin)) Begin
                    
                    Get OnCharactersetConversion sLine to sLine
//                    If (bAnsi) ;
//                            Get ToOEM sLine to sLine
//                    
                    If (stParams.iFileFormat=0) Begin
                        Send SplitStringModified sLine stParams.sFieldDelimiter False stParams.bProtectQuotes (&aColumnValues)
                    End
                    If (stParams.iFileFormat=1) Begin
                        Send SplitStringFixedPositions sLine stParams.aColumnPositions (&aColumnValues)
                    End
                    
                    Move ((stParams.bAutoLocateHeaderLine or iRecordsRead=0) and stParams.bColumnNames) to bColumnNames
                    
                    If (bColumnNames and SizeOfArray(stParams.aValidColumnNames)>0) Begin
                        If (stParams.bStripQuotes) Begin
                            Send _StripQuotes (&aColumnValues)
                        End
                        If (ValidateColumnNames(Self,stParams.aValidColumnNames,aColumnValues)) Begin
                            Send CloseInput of oFileFunctions iChannel
                            Function_Return True
                        End
                        Else Begin
                            If (not(stParams.bAutoLocateHeaderLine)) Begin
                                Send CloseInput of oFileFunctions iChannel
                                Function_Return False
                            End
                        End
                    End
                    
                    If (not(bFin) and not(stParams.bAutoLocateHeaderLine)) Begin
                        // Do nothing!
                    End
                End
                Increment iRecordsRead
            
            Until (bFin)
            
            If (stParams.bAutoLocateHeaderLine) Begin
                Send CloseInput of oFileFunctions iChannel
                Function_Return False
            End
        
        End
        Else Begin 
            Function_Return False
        End
        Send CloseInput of oFileFunctions iChannel
        Function_Return False
    End_Function

        Function _BOM Returns String 
            UChar[] uaBom
            Move 239 to uaBom[0]
            Move 187 to uaBom[1]
            Move 191 to uaBom[2]
            Function_Return (UCharArrayToString(uaBom))
        End_Function
        
        Function _RemoveBom String sLine Returns String
            String sBom
            Get _BOM to sBom
            Move (Replace(sBom,sLine,"")) to sLine
            Function_Return sLine
        End_Function
        
    //Procedure OnHandleRow String[] aValues Boolean bColumnNames tSequentialFileReadStatus byref stStatus String sLine
    //End_Procedure
    Function DoReadFile String sFileName Handle hMsg Integer hObj Returns Boolean
        Boolean bAnsi
        Boolean bFin bFirst
        Boolean bColumnNames
        Boolean bTabDelimited
        Integer iChannel
        Boolean bCancelRequest
        Integer iCancelResponse
        String  sLine
        
        tFileData stFileData
        tSequentialFileReadParams stParams
        tSequentialFileReadStatus stStatus    
        String[] aColumnValues
        
        Send _DoResetStatus
        
        Get ptParams to stParams
        Get ptStatus to stStatus
        Move sFileName to stStatus.sFileName    
        
        Move (stParams.sFieldDelimiter=Character(9)) to bTabDelimited
        If (bTabDelimited) Begin
            Get DirectInput of oFileFunctions ("binary: "+sFileName) to iChannel
        End
        Else Begin
            Get DirectInput of oFileFunctions sFileName to iChannel
        End
        If (iChannel=>0) Begin
            Move (not(stParams.bOem)) to bAnsi
            Move 0 to stStatus.nFileSize
            If (ReadFileData(oFileFunctions,sFileName,&stFileData)) Begin
                Move stFileData.nFileSize to stStatus.nFileSize
            End
            
#IFNDEF Is$WebApp // If Windows application
            If (stParams.bSentinel) Begin
                Send Initialize_StatusPanel of ghoStatusPanel stParams.sSentinelCaption sFileName ("("+NumberToStringTS(oStringFunctions,stStatus.nFileSize,0)+" bytes)")
                Send Start_StatusPanel of ghoStatusPanel
                Send EnableCancelButton of ghoStatusPanel (stParams.bAllowCancel) // MUST be done *after* Start_StatusPanel
            End
#ENDIF            
            Move 0 to stStatus.iRecordsRead
            Move 0 to stStatus.iLinesRead
            Move True to bFirst
            Repeat
                Readln channel iChannel sLine
                If (bFirst) Begin
                    Get _RemoveBom sLine to sLine
                    Move False to bFirst
                End
                Move (SeqEof) to bFin
                If (bTabDelimited) Begin // If we read binary: the readln command will leave in cr and/or lf characters.
                   Move (Replaces(Character(10),sLine,"")) to sLine 
                   Move (Replaces(Character(13),sLine,"")) to sLine 
                End
                If (not(bFin)) Begin
                    
                    Get OnCharactersetConversion sLine to sLine
//                    If (bAnsi) ;
//                            Get ToOEM sLine to sLine
                    
                    Get_Channel_Position iChannel to stStatus.nBytesRead
                    Increment stStatus.iLinesRead

                    If (stParams.iFileFormat=0) Begin
                        Send SplitStringModified sLine stParams.sFieldDelimiter False stParams.bProtectQuotes (&aColumnValues)
                        If (SizeOfArray(aColumnValues)=14) Begin
                            Move WindowIndex to WindowIndex
                        End
                    End
                    If (stParams.iFileFormat=1) Begin
                        Send SplitStringFixedPositions sLine stParams.aColumnPositions (&aColumnValues)
                    End
                    
                    Move ((stParams.bAutoLocateHeaderLine or stStatus.iRecordsRead=0) and stParams.bColumnNames) to bColumnNames
                    
                    If (bColumnNames and SizeOfArray(stParams.aValidColumnNames)>0) Begin
                        If (stParams.bStripQuotes) Begin
                            Send _StripQuotes (&aColumnValues)
                        End
                        If (ValidateColumnNames(Self,stParams.aValidColumnNames,aColumnValues)) Begin
                            Move False to stParams.bAutoLocateHeaderLine
                        End
                        Else Begin
                            If (not(stParams.bAutoLocateHeaderLine)) Begin
                                Move True to bFin
                                Move SFRS_INVALID_COLUMN_NAMES to stStatus.iErrorCode
                                Move "Incompatible file (invalid column names)" to stStatus.sErrorText
                            End
                        End
                    End

                    If (not(bFin) and not(stParams.bAutoLocateHeaderLine)) Begin
                        If (stParams.bStripQuotes) Begin
                            Send _StripQuotes (&aColumnValues)
                        End
                        
                        Increment stStatus.iRecordsRead
                        Send hMsg of hObj aColumnValues bColumnNames (&stStatus) sLine

                        If (stStatus.iErrorCode<>SFRS_NO_ERROR) Begin
                            Move True to bFin
                        End
                    
                        If (not(bFin)) Begin
#IFNDEF Is$WebApp // If Windows application
                            If (stParams.bSentinel) Begin
                                Send UpdateStatus stStatus
                                Get Check_StatusPanel of ghoStatusPanel to bCancelRequest
                                If bCancelRequest Begin
                                    Get YesNo_Box "Do you want to cancel?" "Confirm cancel" MB_DEFBUTTON1 to iCancelResponse
                                    If (iCancelResponse=MBR_Yes) Begin
                                        Move True to bFin
                                        Move True to stStatus.bCancelled
                                        Move SFRS_USER_INTERRUPT to stStatus.iErrorCode
                                        Move "Process interrupted by user" to stStatus.sErrorText
                                    End
                                    Else Begin
                                        Send Start_StatusPanel of ghoStatusPanel
                                    End
                                End
                            End
#ENDIF
                        End
                    End
                End
            
            Until (bFin)
            
#IFNDEF Is$WebApp // If Windows application
            Send Stop_StatusPanel of ghoStatusPanel
#ENDIF
            Send CloseInput of oFileFunctions iChannel
        
            If (stParams.bAutoLocateHeaderLine) Begin
                Move SFRS_HEADER_LINE_NOT_LOCATED to stStatus.iErrorCode
                Move "Header line could not be auto-located" to stStatus.sErrorText
            End
        
        End
        Else Begin 
            Move SFRS_FILE_NOT_FOUND to stStatus.iErrorCode
            Move (Replace("#","File not found (#)",sFileName)) to stStatus.sErrorText
        End
        
        Set ptStatus to stStatus
        Function_Return (stStatus.iErrorCode=0)
//        Function_Return (stStatus.iErrorCode<>0)
    End_Function
    
    Procedure ShowDone
        tSequentialFileReadStatus stStatus    
        Get ptStatus to stStatus
        If (stStatus.iErrorCode=SFRS_NO_ERROR) Begin
            Send Info_Box "File successfully read"
        End
        Else Begin
            Send Info_Box stStatus.sErrorText
        End
    End_Procedure
    
    Function _FindColumnNameIndex String sColumnName String[] aColumnNames Returns Integer
        Integer iMax iItem
        Move (SizeOfArray(aColumnNames)-1) to iMax
        For iItem from 0 to iMax
            If (sColumnName=aColumnNames[iItem]) Begin
                Function_Return iItem
            End
        Loop
        Function_Return -1
    End_Function
    
    Function ColumnValue String sColumnName String[] aValues Boolean bErrorOnColumnNotFound Returns String
        Integer iColumn
        tSequentialFileReadParams strParams
        Get ptParams to strParams
        Get _FindColumnNameIndex sColumnName strParams.aValidColumnNames to iColumn
        If (iColumn>=0) Begin
            If (iColumn<SizeOfArray(aValues)) Begin
                Function_Return aValues[iColumn]
            End
            Function_Return ""
        End
        Else If (bErrorOnColumnNotFound) Begin
            Error DFERR_PROGRAM ("Column not found: "+sColumnName)
            Function_Return ""
        End
    End_Function
    
    Procedure ColumnValuesToBuffer Integer iTable String[] aColumnValues
        Integer iColumnMax iColumn
        String sColumnName sValue
        Get_Attribute DF_FILE_NUMBER_FIELDS of iTable to iColumnMax
        For iColumn from 1 to iColumnMax
            Get_Attribute DF_FIELD_NAME of iTable iColumn to sColumnName
            If (Uppercase(sColumnName)<>"RECNUM") Begin
                Get ColumnValue sColumnName aColumnValues False to sValue
                Set_Field_Value iTable iColumn to sValue
            End 
        Loop
    End_Procedure
    
End_Class // cSequentialFileReader
